#include<stdio.h>
//main()
//{
//	printf("hello world");
//	return 0;
//}//调试成功
//浮点型数据的舍入误差

//main()
//{
//	float a, b;
//	a = 123456.789e5;
//	b = a + 20;
//	printf("a=%f/n,b=%f/n",a, b);
//
//}由此代码可知，理论值应该是a=12345678900，b=12345678920
//而输出值与理论值不符，后面的值也已经发生了错误
//原因是：一个单精度实型变量只能保证有效数字是7位，7位之后，数字变得无意义，并不准确地表示该数。
//注意：在C程序中，应当避免将一个很大的数和一个很小的数直接相加或相减，否则就会“丢失”小的数。


//main()
//{
//	double a, b;
//	a = 123456.789e5;
//	b = a + 20;
//	printf("a=%f\n,b=%f\n", a, b);
//}
//运行此程序可见，a可以改为double型，有效数字是16位，则可以全部接收9位的数字。
//main()
//{
//	char c1, c2;
//	c1 = 97, c2 = 98;//相当于c1='a',c2='b'//
//	printf("%c%c\n", c1, c2);//以字符型变量输出//
//	printf("%d%d\n",c1,c2);//以整型变量输出//
//}
//
//main()
//{
//	int i;
//	char c;
//	i = 'a';
//	c = 97;
//	printf("%d,%d\n", i, c);
//	printf("%c,%c\n", i, c);
//	return 0;
//}
//main()
//{
//	char c1, c2;
//	c1 = 'a';
//	c2 = 'b';
//	c1 = c1 - 32;
//	c2 = c2 - 32;
//	printf("%c  %c", c1, c2);
//}

//常量：不变的量
//C中常量分为以下几种：
//字面常量
//#const修饰的常变量
//define 定义的标识符常量
//枚举常量

//字面常量
//int main()
//{
//	int num = 4;//定义一个num变量，赋值4
////3 3.14；//字面常量（字面上理解，它就是一个常量
//printf("%d\n", num);
//num = 8;
//printf("%d\n", num);
//return 0;
//}

//int main()
//{
//	//const-常属性的意思
// const修饰的常变量，指的就是num不能修改，具有了常属性，而num本身的本质属性还是变量
//	const int num = 8；
//		printf("%d\n", num);
//	num = 16;
//	printf("%d\n", num);
//	return 0;
//}
//此程序运行会出现错误，原因：num具备常属性，定义后不能被更改



#include<stdio.h>
//int main()
//{
	//int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
	//int i = 0;
	//while (i < 10)
	//{
	//	printf("%d ", arr[i]);
	//	i++;
	//}
//		int a = 5 / 2;//这里除号结果取的是商。
//		int b = 5 % 2;//这里的“%”的意思是“模”运算符，运算结果取的是余数。
//		printf("%d\n%d\n", a,b);
//	
//	return 0;
//}
 //移（二进制）位操作符
 //概念：<<左移位操作符,    >>右移位操作符 
 // 解释：假如声明一个变量int a=1,那么，在计算机中，一个整型1，占4个字节，相当于32个bit位。
 //也就是二进制的形式是01，但是要补全为32个bit位，所以应为：00000000000000000000000000000001
//int main()
//{
//	int a = 1;
//	a << 1;//表示向左移了1bit位，一共32个bit位，第一个0出去了，因为要补全32个bit位，所以要在后面空出来的地方补全零，使得其仍旧是32个bit位。 
//	//从00000000000000000000000000000001变为了       00000000000000000000000000000010 
//	int b = a << 1;
//	
//	printf("%d\n",b);
//	return 0;
//}
int main()
{

	int a = 3;
	int b = 5;
	int c = a & b;
	printf("%d\n", c);
	return 0;
}
//选择语句
#include <stdio.h>
//int main()
//{
//int input=0;
//printf("专升本\n");
//printf("你要好好学习吗\?(1/0)>:");
//scanf("%d	",&input);
//if(input==1)
//printf("你可以拿到一个好offer\n");
//else
//printf("搬铁轨\n");
//	
//	return 0;
// } 

//循环语句的初识 
//while语句
//for循环（后期讲解）
//do...while循环（后期讲解） 
 //示例
// int main()
// {
// 	
// 	int input=0;
// 	int line=0;
// 	printf("软件工程专业");
// 	while(line<10)
//	 {
//	 printf ("敲一行代码\n");
// 	line++; }
// 	printf("拿到offer\n");
//	 
//	printf	("没有好好继续学习，有两种结果(1/0)>:");
//	scanf("%d",&input);
//	if (input==1)
//	printf("送外卖\n");
//	else
//	printf("被开除\n"); 
// 	return 0;
// }
// 


 //两数求和（函数）;

//int Add(int x,int y)//在主函数前应先定义好函数，定义Add函数，并定义x，y两个自变量。 
// {//括号里的所有内容，称为函数体 
// 	int z=x+y;//定义因变量z等于x+y。 
// 	return z;//算出z后，将z回代，也就是返回z。 又因为z是一个整型变量，所以要在定义函数的前面给它定义函数的类型。 
// }
// int main()
// {
// 	int num1=0;
//	 int num2=0;
// 	int sum=0;
// 	scanf("%d%d",num1,num2);
//	//sum=num1+num2;
//	//这样虽然也可以实现，但没有用函数。如果用函数的话，则如下：
//	sum=Add(num1,num2);
// 	printf("sum=%d\n",sum);
//	return 0;
// }
 //以上是自定义函数，函数分为自定义函数和库函数。



 //数组的学习

//数组的含义就是：一组相同类型元素的集合
//
//在内存里申请了一个空间，里面放着一组相同类型的元素，这些元素在内存里都有下标，下标从0开始，也就是1的下标是0,2的下标是1，以此类推（n-1）
//int main()
//{
//int arr[10]={1,2,3,4,5,6,7,8,9,10};//数组是放在内存里的，是一个连续的空间
//int i=0; 
//while(i<10)
//{
//printf("%d ",arr[i]);	
//	i++;
//	
//	
//}
////printf("%d\n",arr[4]) ;//可以以下标的方式访问数组里的某一个元素.也就是arr[下标]。  
//
//return 0;
//}
//还例如char ch[20];
//float arr[20];
// 

 //操作符的粗略讲解（后面细讲）
// int main()
// {
// 	int a=5/2;//这里除号结果取的是商。
//     int b=5%2;//这里的“%”的意思是“模”运算符，运算结果取的是余数。
//	 printf("%d,%d\n",a,b) ;
// 	return 0;
//  } 
// 

 //移（二进制）位操作符
 //概念：<<左移位操作符,    >>右移位操作符 
 // 解释：假如声明一个变量int a=1,那么，在计算机中，一个整型1，占4个字节，相当于32个bit位。
 //也就是二进制的形式是01，但是要补全为32个bit位，所以应为：00000000000000000000000000000001
// int main()
// {
// 	int a=1;
// 	int b=a<<1;//表示向左移了1bit位，一共32个bit位，第一个0出去了，因为要补全32个bit位，所以要在后面空出来的地方补全零，使得其仍旧是32个bit位。 
// 	//从00000000000000000000000000000001变为了       00000000000000000000000000000010 
// 	printf("%d\n",b); 
// 	return 0;
// }
 //但是这里要注意，a的值依旧是不变，只不过是把a移位了的值赋给了b，a本身还是1。 


 //（二进制）位操作符的学习，这里的位，仍然是二进制位 
 //一共有三个符号，分别是
 //第一个：&    按位与
 //第二个：|    按位或
 //第三个：^    按位异或 


//int main()
// {
// 	
// 	int a=3;
// 	int b=5;
// 	int c=a&b;
// 	printf("c=%d\n",c);
// 	
// return 0;
// }
// 这里的与运算概念补充：与：两者都假，则结果为假，两者都真，则结果为真，其中两者一者为假一者为真，则结果为假。
//用1，0表示就是0&0=0，0&1=0,1&1=1 .（其中，1为真，0为假） 

 // 第二个：| 按位或
// int main()
//  {
//  	int a=3;
//  	int b=5;
//  	int c=a|5;
//      3转换为二进制为：   011
//      5转换为二进制为：   101
//               结果为：   111 
//               转换为十进制为： 7 
// 或运算的定义：其中有一个真，结果就为真
// 用0，1表示也就是：1|0=1,0|0=0 
//  	printf("%d",c);
//  	return 0;
//  }

 // 第三个：按位异或 
// int main()
// {
// 	int a=3;
// 	int b=5;
// 	int c=3^5;
//	异或运算的概念： 对应的二进制位相异，则结果为 1, 
//                   对应的二进制位相同，则结果为0	
//              用1,0表示为： 1^1=0,1^0=1 
//	  所以 3的二进制码为：  011 
// 	       5的二进制码为：  101 
// 	              异或运算为；110
//                转换为十进制为：6 
// 	printf("%d\n",c);
// 	return 0;
// }
